<?php
/*
 * Mozilla Public License
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is OOSpores content management framework, released August 2nd, 2010.
 * The Initial Developer of the Original Code is Antoine Berranger.
 * 
 * Portions created by Antoine Berranger are Copyright (C) 2010 Antoine Berranger
 * All Rights Reserved.
 * 
 * Contributor(s): ____________________.
 *
 * Alternatively, the contents of this file may be used under the terms
 * of the GPL license (the  "[GPL] License"), in which case the
 * provisions of [GPL] License are applicable instead of those
 * above.  If you wish to allow use of your version of this file only
 * under the terms of the [GPL] License and not to allow others to use
 * your version of this file under the MPL, indicate your decision by
 * deleting  the provisions above and replace  them with the notice and
 * other provisions required by the [GPL] License.  If you do not delete
 * the provisions above, a recipient may use your version of this file
 * under either the MPL or the [GPL] License.
 */

/**
 * Class to access some cron item's data
 * 
 * @package	Oos_Cron
 * 
 * @since	0.1.4
 * @author	Antoine Berranger <antoine@oospores.net>
 */
class Oos_Cron_Log extends Oos_BaseClass
{
	/** string	Name of the cron file running */
	private $_name;
	/** string	Account where the cron is running */
	private $_account;
	/** string	Log entries */
	private $_logs;
	/** Oos_System	System instance */
	private $_system;
	/** boolean	Whether the report was sent or not, we don't wanna receive billions of emails ! */
	private $_report_sent;
	/** boolean	Whether we print logs on standard output or not */
	private $_no_print;
	
	/**	array	Associative array mapping loop names to the number of item processed */
	private $_loop_cpt 	= array();
	/** array	Associative array mapping loop names to the next step on which we'll send some log */
	private $_loop_step = array();
	
	/** integer	Starting time of the logging object */
	private $_START_TIME;
	
	/**
	 * Class constructor.
	 * 
	 * @version	1.0
	 * @since	0.1.4
 	 * @author	Antoine Berranger <antoine@oospores.net>
	 * 
	 * @param	string	$name		Name of the cron file running
	 * @param	string	$account	Account where the cron is running
	 * @param	boolean	$noprint	(opt.) If you don't wanna send logs to standard output
	 */	
	public function __construct($name, $account, $noprint = false)
	{
		$this->_name		= $name;
		$this->_account		= $account;
		$this->_logs		= '';
		$this->_system		= Oos_System::factory();
		$this->_report_sent = false;
		$this->_no_print	= $noprint;
		
		$this->_START_TIME 	= time();
		
		$this->addEvent("Script '" . $name . "' begins at " . date("Y-m-d H:i:s"));
	}
	
	/**
	 * Class destructor.
	 * Sends report if it wasn't done yet.
	 * @see		Oos_Cron_Log::sendReport
	 * 
	 * @version	1.0
	 * @since	0.1.4
 	 * @author	Antoine Berranger <antoine@oospores.net>
	 */		
	public function __destruct()
	{
		$this->sendReport();
	}
	
	/**
	 * Sends a report by email to the team maintenance emails defined in configuration files
	 * 
	 * @version	1.0
	 * @since	0.1.4
 	 * @author	Antoine Berranger <antoine@oospores.net>
 	 * 
	 * @param 	boolean	$force	Force sending the report whether it was already sent or not.
	 */
	public function sendReport($force = false)
	{
		// checking
		if($this->_report_sent && !$force) { return; }
		
		// sending 
		$config = Oos_Config::getInstance();
		
		$mails 		= $config->getParam('TEAM', 'MAILS_MAINTENANCE');
		$subject	= '[' . $this->_account . '] Cron log for script "' . $this->_name . '"';
		$body		= $this->logs . '
		
This mail as been automatically generated by OOSpores.
		';
		mail(implode(",", $mails), $subject, $body);
		
		// locking
		$this->_report_sent = true;
	}

	/**
	 * Adds an event for this cron item
	 * 
	 * @version	1.0
	 * @since	0.1.4
 	 * @author	Antoine Berranger <antoine@oospores.net>
 	 * 
 	 * @param	string	$message	What the event is telling us 
	 * @param 	boolean	$milestone	(opt.) Adding milestone data (memory print and execution time) after the event's message
	 * @param	boolean	$store		(opt.) Whether to store this event's message in our logs arrays or not	
	 */
	public function addEvent($message, $milestone = true, $store = true)
	{
		if($milestone) 
		{
			$timeSec = (time() - $this->_START_TIME);
			
			if($timeSec < 600) 
			{
				$duration = $timeSec;
				$unit = "s";
			} 
			else 
			{
				$duration = round($timeSec / 60);
				$unit = "mn";
			}
			
			$header = "[Time] ".$duration."(".$unit.")\t";
			$header.= "[Mem] ".$this->_system->getMemoryUsage()."(ko)\t\t";
		}
		
		$message = $header.$message."\n";
		
		if($store)
		{
			$this->_logs .= $message;
		}
			
		if(!$this->_no_print)
		{
			print $message;
		}
	}	
	
	/**
	 * Managing loops. Adds an event every [step]%
	 * 
	 * @version	1.0
	 * @since	0.1.4
 	 * @author	Antoine Berranger <antoine@oospores.net>
 	 * 
 	 * @param	string	$name			Name of this loop
	 * @param 	boolean	$nb_elements	Number of elements in that loop
	 * @param	boolean	$step			(opt.) Step between two logs, in percent
	 */	
	public function addLoop($name, $nb_elements, $step = 5)
	{
		if(!$this->_loop_cpt[$name]) 
		{
			$this->_loop_cpt[$name] 	= 0;
			$this->_loop_step[$name] 	= 0;
		}
			
		// rafraichissement des compteurs
		$this->_loop_cpt[$name]++;
		if($this->_loop_step[$name] == 0)  
		{
			$this->_logEvent("Processing ".$nb_elements." objects");
			$this->_loop_step[$name] = intval($step);
		}
		
		// calcul du taux d'avancemet
		$ratio = 100 * $this->_loop_cpt[$name] / intval($nb_elements);
		
		// affichage si un palier a été passé.
		if($ratio > $this->_loop_step[$name]) 
		{
			$this->addEvent($this->_loop_step[$name]." % done\t");
			$this->_loop_step[$name] += intval($step);
		}
	}
}